generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String
  email         String   @unique  
  emailVerified DateTime?
  image         String?
  passwordHash  String   // Remove ? to make required
  isOnboarded   Boolean  @default(false)

  height        Float?   // in cm
  weight        Float?   // in kg
  sex           Sex?
  age           Int?
  allergies     String[] // array of allergy strings
  dietaryRestrictions String[] 
  preferredCookingTime Int?   // in minutes
  activityLevel ActivityLevel?
  bmr           Float?   
  goal          String?
  accounts      Account[]
  sessions      Session[]
}

enum Sex {
  MALE
  FEMALE
  OTHER
}

enum ActivityLevel {
  SEDENTARY     // Little or no exercise
  LIGHT         // Light exercise/sports 1-3 days/week
  MODERATE      // Moderate exercise/sports 3-5 days/week
  ACTIVE        // Hard exercise/sports 6-7 days a week
  VERY_ACTIVE   // Very hard exercise/physical job & exercise 2x/day
}
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}
